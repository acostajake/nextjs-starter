{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { stringify } from 'query-string';\nimport Router from 'next/dist/next-server/server/router';\nexport function redirect(context, location, keepExistingQuery = false, statusCode = 307) {\n  const {\n    pathname\n  } = location;\n  const query = keepExistingQuery ? _objectSpread({}, context.query, {}, location.query) : location.query;\n  const queryString = stringify(query);\n\n  if (context.res) {\n    // server\n    context.res.writeHead(statusCode, {\n      Location: queryString ? `${pathname}?${queryString}` : pathname\n    });\n    context.res.end();\n  } else {\n    Router.replace({\n      pathname,\n      query\n    });\n  }\n}","map":{"version":3,"sources":["/Users/jakeacosta/Desktop/projects/reunion/lib/session.js"],"names":["stringify","Router","redirect","context","location","keepExistingQuery","statusCode","pathname","query","queryString","res","writeHead","Location","end","replace"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,cAA1B;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AAEA,OAAO,SAASC,QAAT,CACLC,OADK,EAELC,QAFK,EAGLC,iBAAiB,GAAG,KAHf,EAILC,UAAU,GAAG,GAJR,EAKL;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAeH,QAArB;AACA,QAAMI,KAAK,GAAGH,iBAAiB,qBACtBF,OAAO,CAACK,KADc,MACJJ,QAAQ,CAACI,KADL,IAE3BJ,QAAQ,CAACI,KAFb;AAGA,QAAMC,WAAW,GAAGT,SAAS,CAACQ,KAAD,CAA7B;;AAEA,MAAIL,OAAO,CAACO,GAAZ,EAAiB;AACf;AACAP,IAAAA,OAAO,CAACO,GAAR,CAAYC,SAAZ,CAAsBL,UAAtB,EAAkC;AAChCM,MAAAA,QAAQ,EAAEH,WAAW,GAAI,GAAEF,QAAS,IAAGE,WAAY,EAA9B,GAAkCF;AADvB,KAAlC;AAGAJ,IAAAA,OAAO,CAACO,GAAR,CAAYG,GAAZ;AACD,GAND,MAMO;AACLZ,IAAAA,MAAM,CAACa,OAAP,CAAe;AACbP,MAAAA,QADa;AAEbC,MAAAA;AAFa,KAAf;AAID;AACF","sourcesContent":["import { stringify } from 'query-string';\nimport Router from 'next/dist/next-server/server/router';\n\nexport function redirect(\n  context,\n  location,\n  keepExistingQuery = false,\n  statusCode = 307\n) {\n  const { pathname } = location;\n  const query = keepExistingQuery\n    ? { ...context.query, ...location.query }\n    : location.query;\n  const queryString = stringify(query);\n\n  if (context.res) {\n    // server\n    context.res.writeHead(statusCode, {\n      Location: queryString ? `${pathname}?${queryString}` : pathname\n    });\n    context.res.end();\n  } else {\n    Router.replace({\n      pathname,\n      query\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}